# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UV4c6vaWF1XkSXrWRRPF6Yl3Yv5K833L
"""


#LinkedIn API

import json
import http.client

conn = http.client.HTTPSConnection("linkedin-jobs-api2.p.rapidapi.com")

headers = {
    'x-rapidapi-key': "a618ab34dcmshea8f1c87add4211p1df01bjsn29d2c71787c3",
    'x-rapidapi-host': "linkedin-jobs-api2.p.rapidapi.com"
}

conn.request("GET", "/active-jb-7d?location_filter=%22France%22", headers=headers)

res = conn.getresponse()
data = res.read()

jobs_data = json.loads(data.decode("utf-8"))

print(data.decode("utf-8"))

#BD relationnelles des offres d'emploi
import sqlite3

conn = sqlite3.connect("C:/Users/malak/Downloads/jobs.db")
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS companies (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT UNIQUE,
    url TEXT,
    employees INTEGER,
    size TEXT,
    industry TEXT,
    headquarters TEXT,
    founded TEXT,
    specialties TEXT,
    description TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS jobs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    job_id TEXT UNIQUE,
    title TEXT,
    company_id INTEGER,
    location TEXT,
    latitude REAL,
    longitude REAL,
    employment_type TEXT,
    posted_date TEXT,
    valid_through TEXT,
    job_link TEXT,
    source TEXT,
    FOREIGN KEY (company_id) REFERENCES companies (id)
)
''')

for job in jobs_data:
    specialties = job.get("linkedin_org_specialties")
    if not isinstance(specialties, list):
        specialties = []
  cursor.execute('''
    INSERT OR REPLACE INTO companies (name, url, employees, size, industry, headquarters, founded, specialties, description)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        job.get("organization"),
        job.get("linkedin_org_url"),
        job.get("linkedin_org_employees"),
        job.get("linkedin_org_size"),
        job.get("linkedin_org_industry"),
        job.get("linkedin_org_headquarters"),
        job.get("linkedin_org_foundeddate"),
        ", ".join(specialties),
        job.get("linkedin_org_description")
    ))

  cursor.execute("SELECT id FROM companies WHERE name = ?", (job.get("organization"),))
  company_id = cursor.fetchone()[0]

  cursor.execute('''
    INSERT OR REPLACE INTO jobs (job_id, title, company_id, location, latitude, longitude, employment_type, posted_date, valid_through, job_link, source)
    VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    ''', (
        job.get("id"),
        job.get("title"),
        company_id,
        job.get("locations_derived")[0] if job.get("locations_derived") else None,
        job.get("lats_derived")[0] if job.get("lats_derived") else None,
        job.get("lngs_derived")[0] if job.get("lngs_derived") else None,
        ", ".join(job.get("employment_type", [])),
        job.get("date_posted"),
        job.get("date_validthrough"),
        job.get("url"),
        job.get("source")
    ))

conn.commit()
conn.close()

print("Les données ont été enregistrées avec succès dans jobs.db !")

#afficher les données qui sont dans la base

conn = sqlite3.connect("jobs.db")
cursor = conn.cursor()

cursor.execute("SELECT COUNT(*) FROM jobs")
job_count = cursor.fetchone()[0]  # Récupérer le nombre total

print(f"Nombre total d'offres d'emploi : {job_count}")

conn.close()



import pandas as pd


file_path = "events.results.csv"
df = pd.read_csv(file_path)

df

file_path_2="trafic-annuel-entrant-par-station-du-reseau-ferre-2021.csv"
df2 = pd.read_csv(file_path_2, delimiter=";")
df2

import sqlite3

def get_job_by_title(title):
    # Connexion à la base de données
    conn = sqlite3.connect("jobs.db")
    cursor = conn.cursor()

    # Requête pour récupérer les informations du job par titre
    cursor.execute('''
        SELECT j.job_id, j.title, j.location, j.latitude, j.longitude, j.employment_type,
               j.posted_date, j.valid_through, j.job_link, j.source,
               c.name AS company_name, c.url AS company_url, c.industry AS company_industry,
               c.headquarters AS company_headquarters, c.founded AS company_founded,
               c.specialties AS company_specialties, c.description AS company_description
        FROM jobs j
        JOIN companies c ON j.company_id = c.id
        WHERE j.title LIKE ?
    ''', ('%' + title + '%',))  # Recherche le titre avec des correspondances partielles

    # Récupérer les résultats
    jobs = cursor.fetchall()

    # Fermeture de la connexion
    conn.close()

    return jobs

# Exemple d'appel de la fonction avec un titre spécifique
title = "Développeur Java confirmé F/H"
jobs = get_job_by_title(title)

# Affichage des résultats
if jobs:
    for job in jobs:
        print(f"Job ID: {job[0]}")
        print(f"Title: {job[1]}")
        print(f"Location: {job[2]}")
        print(f"Latitude: {job[3]}")
        print(f"Longitude: {job[4]}")
        print(f"Employment Type: {job[5]}")
        print(f"Posted Date: {job[6]}")
        print(f"Valid Through: {job[7]}")
        print(f"Job Link: {job[8]}")
        print(f"Source: {job[9]}")
        print(f"Company Name: {job[10]}")
        print(f"Company URL: {job[11]}")
        print(f"Company Industry: {job[12]}")
        print(f"Company Headquarters: {job[13]}")
        print(f"Company Founded: {job[14]}")
        print(f"Company Specialties: {job[15]}")
        print(f"Company Description: {job[16]}")
        print("----------------------------")
else:
    print("Aucun job trouvé pour les critères spécifiés.")